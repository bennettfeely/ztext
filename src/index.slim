doctype html
html lang="en"
	head
		/ Essentials
		meta charset="utf-8"
		meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"
		title ztext.js | 3D Typography for the Web
		meta name="description" content="Easy to implement, 3D typography for any website and every font."
		/ Icons
		link rel="apple-touch-icon" sizes="180x180" href="img/icon/apple-touch-icon.png"
		link rel="icon" type="image/png" sizes="32x32" href="img/icon/favicon-32x32.png"
		link rel="icon" type="image/png" sizes="16x16" href="img/icon/favicon-16x16.png"
		link rel="mask-icon" color="#09101d" href="img/icon/safari-pinned-tab.svg"
		/ Styles
		link href="css/style.min.css" rel="stylesheet"
		/ Fonts
		link href="https://fonts.googleapis.com/css2?family=Cousine&family=Nunito:wght@400;600;800&display=swap" rel="stylesheet"
	body
		header.header#header
			.wrapper
				.container
					h1 
						span data-z="true" data-z-depth=".15em" data-z-event="pointer" data-z-eventRotation="40deg" z
					h1
						span data-z="true" data-z-depth=".15em" data-z-event="pointer" data-z-eventRotation="40deg" t
					h1
						span data-z="true" data-z-depth=".15em" data-z-event="pointer" data-z-eventRotation="40deg" e
					h1
						span data-z="true" data-z-depth=".15em" data-z-event="pointer" data-z-eventRotation="40deg" x
					h1
						span data-z="true" data-z-depth=".15em" data-z-event="pointer" data-z-eventRotation="40deg" t
					h1
						span data-z="true" data-z-depth=".15em" data-z-event="pointer" data-z-eventRotation="40deg" .
					h1
						span data-z="true" data-z-depth=".15em" data-z-event="pointer" data-z-eventRotation="40deg" j
					h1
						span data-z="true" data-z-depth=".15em" data-z-event="pointer" data-z-eventRotation="40deg" s
					h2 Easy to implement, 3D typography for the web. Works with every font.
					.share.twitter-shade
						a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="large" data-text="ztext.js - Easy to implement, 3D typography for the web. Works with every font." data-url="https://bennettfeely.com/ztext" data-related="bennettfeely" data-show-count="false" Tweet
						script async="true" src="https://platform.twitter.com/widgets.js" charset="utf-8"
					.share.facebook-share
						.fb-like data-href="https://bennettfeely.com/ztext" data-width="" data-layout="button_count" data-action="like" data-size="large" data-share="true"			
		main.main
			.wrapper
				.split
					.split-item
						section.download#download
							.container
								h2 Download
								a.button.split-item href="js/ztext.min.js" 
									strong ztext.min.js 
									| &mdash; Minified 3.8 kb
								.repo data-repo="bennettfeely/ztext"
									.repo-box
										.repo-title
											<a class="repo-author" href="https://github.com/bennettfeely">bennettfeely</a> / <a class="repo-name" href="https://github.com/bennettfeely/ztext">ztext</a>
										a.repo-meta href="https://github.com/bennettfeely/ztext"
											span.repo-stars 1 star
											span.repo-license MIT
											span.repo-updated 1 week ago

					.split-item
						section.tips#tips
							.container
								h2 Pay what you want
								.tip-jar-wrapper
									label.tip-jar
										| $
										input.tip type="text"  inputmode="numeric" placeholder="10"
									a.tip-button.button href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=9YZX9KJVUDWXW&currency_code=USD&amount=10&item_name=ztext.js&source=url" 
										img src="img/paypal.svg" width="124" height="33" alt="PayPal"
										strong Tip
								p Are you using ztext and happy with it? Your kind support keeps open-source JS libraries like this free for others.
			section.initialization#initialization
				.wrapper
					.container
						.split
							.split-item.shrink
								h2 Initialization
								p There are multiple ways to use ztext. Pick whichever method is easiest for you.
								ol 
									li <a href="#html-init">HTML attributes</a>
									li <a href="#js-init">Vanilla JavaScript</a>
									li <a href="#react-init">React JS</a> <span class="new">New</span>
									li <a href="#vue-init">Vue JS</a> <span class="new">New</span>
							.split-item
								h3 How it works
								p Ztext gives the illusion of volume by creating layers from an HTML element. There's no need to spend hours fiddling with <code class="light"><span class="red-code">&lt;canvas&gt;</span></code> or forcing users to download multi-megabyte WebGL libraries. With ztext, content remains fully selectable and accessible.
								p <a class="external" href="https://caniuse.com/#feat=transforms3d">Over 98% of users</a> use a web browser that supports the CSS <code class="light"><span class="yellow-code">transform-style</span></code> property, which ztext needs to work. In unsupported browsers, ztext gracefully turns off.						
			section.html-init#html-init
				.wrapper
					.container
						h3 Initialize with HTML attributes
						p Include <code class="light"><span class="green-code">ztext.min.js</span></code> on your site before the closing <code class="light"><span class="red-code">&lt;/body&gt;</span></code> tag on your HTML file. For example:
						pre.dark
							h3 HTML
							code 
								<span class="red-code">&lt;script src</span>=<span class="green-code">"/path/to/ztext.min.js"</span><span class="red-code">&gt;&lt;/script&gt;</span>
						p With this method, ztext will look for any HTML element with the <code class="light"><span class="yellow-code">data-z</span></code></code> or <code class="light"><span class="yellow-code">data-z</span>=<span class="green-code">"true"</span></code> attribute and will apply a 3D effect to it.
						p See <a href="#options">Options</a> the below for a full list of possible <code class="light"><span class="yellow-code">data-z-XXXXX</span></code> attributes.

						.split
							.split-item
								pre.dark
									h3 HTML
									code#copy-0
										<span class="red-code">&lt;h1&gt;</span>
										<br>   <span class="red-code">&lt;span</span> <span class="yellow-code">data-z</span> <span class="yellow-code">data-z-layers</span>=<span class="green-code">"3"</span> <span class="yellow-code">data-z-depth</span>=<span class="green-code">"0.5em"</span><span class="red-code">></span>A<span class="red-code">&lt;/span&gt;</span>
										<br><span class="red-code">&lt;/h1&gt;</span>
									.menu.menu-0.right-align
								p Structurally, ztext turns that code into this:
								pre.light
									code
										span &lt;h1 data-z data-z-layers="3" data-z-depth="0.5em"&gt;<br>&nbsp;&nbsp;&nbsp;&lt;span class="z-text"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span class="z-layers"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span class="z-layer"&gt;A&lt;/span&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span class="z-layer"&gt;A&lt;/span&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span class="z-layer"&gt;A&lt;/span&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/span&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/span&gt;<br>&lt;/h1&gt;
							.split-item
								.preview
									h3 Preview
									h1.x-large data-z="true" data-z-layers="3" data-z-depth=".5em" A
								p The duplicate layers are visible to users but ztext makes them hidden from screen readers and other forms of user interaction.
			section.js-init#js-init
				.wrapper
					.container
						h3 Initialize with JavaScript
						p Use ztext with vanilla JS with <code class="light"><span class="purple-code">new</span> <span class="red-code">Ztextify</span><span class="blue-code">(</span><span class="green-code">selector</span>, <span class="blue-code">{})</span></code>. This constructor accepts two arguments: the HTML element selector and an options object.
						pre.dark
							h3 JS
							code#copy-1
								<span class="purple-code">var</span> <span class="red-code">ztxt</span> <span class="blue-code">=</span> <span class="purple-code">new</span> <span class="red-code">Ztextify</span><span class="blue-code">(</span><span class="green-code">".hero-text"</span><span class="blue-code">,</span> <span class="blue-code">{</span>
									<br>   <span class="blue-code">depth</span>: <span class="green-code">"30px"</span>,
									<br>   <span class="blue-code">layers</span>: <span class="orange-code">8</span>,
									<br>   <span class="blue-code">fade</span>: <span class="orange-code">true</span>,
									<br>   <span class="blue-code">direction</span>: <span class="green-code">"forwards"</span>,
									<br>   <span class="blue-code">event</span>: <span class="green-code">"pointer"</span>,
									<br>   <span class="blue-code">eventRotation</span>: <span class="green-code">"35deg"</span>
								<br><span class="blue-code">})</span>;
								.menu.menu-1.right-align
			section.react-init#react-init
				.wrapper
					.container
						h3 Use with React
						.split
							.split-item
								p Check out <a href="https://github.com/snettah/react-ztext">react-ztext</a> by Safi Nettah (<a href="https://github.com/snettah">snettah</a>).
								.repo data-repo="snettah/react-ztext"
									.repo-box
										.repo-title
											<a class="repo-author" href="https://github.com/snettah">snettah</a> / <a class="repo-name" href="https://github.com/snettah/react-ztext">react-ztext</a>
										a.repo-meta href="https://github.com/snettah/react-ztext"
											span.repo-stars 5 stars
											span.repo-license MIT
											span.repo-updated 3 months ago
							.split-item
								a.code-preview href="https://github.com/snettah/react-ztext"
									pre.dark
										h3 React
										code
											<span class="yellow-code">import</span> <span class="blue-code">React</span> <span class="yellow-code">from</span> <span class="green-code">'react'</span>
											<br><span class="yellow-code">import</span> <span class="blue-code">Ztext</span> <span class="yellow-code">from</span> <span class="green-code">'react-ztext'</span>
											<br>
											<br><span class="yellow-code">const</span> <span class="blue-code">Example</span> = () => (
											<br>	<span class="red-code">&lt;Ztext</span>
											<br>		<span class="yellow-code">depth</span>=<span class="green-code">'1rem'</span>
											<br>		<span class="yellow-code">direction</span>=<span class="green-code">'both'</span>
											<br>		<span class="yellow-code">event</span>=<span class="green-code">'pointer'</span>
											<br>		<span class="yellow-code">eventRotation</span>=<span class="green-code">'30deg'</span>
											<br>		<span class="yellow-code">eventDirection</span>=<span class="green-code">'default'</span>
											<br>		<span class="yellow-code">fade</span>={<span class="orange-code">false</span>}
											<br>		<span class="yellow-code">layers</span>={<span class="orange-code">10</span>}
											<br>		<span class="yellow-code">perspective</span>=<span class="green-code">'500px'</span>
											<br>	<span class="red-code">&gt;</span>
											<br>		<span class="red-code">&lt;span</span> <span class="yellow-code">role</span>=<span class="green-code">'img'</span> <span class="yellow-code">aria-label</span>=<span class="green-code">'emoji'</span><span class="red-code">&gt;</span>
											<br>			😂🔥🍔
											<br>		<span class="red-code">&lt;/span&gt;</span>
											<br>	<span class="red-code">&lt;/Ztext&gt;</span>
											<br>)
			section.vue-init#vue-init
				.wrapper
					.container
						h3 Use with Vue
						.split
							.split-item
								p Check out <a href="https://github.com/snettah/vue-ztext">vue-ztext</a> by <a href="https://github.com/Namchee">Namchee</a>.
								.repo data-repo="Namchee/vue-ztext"
									.repo-box
										.repo-title
											<a class="repo-author" href="https://github.com/Namchee">Namchee</a> / <a class="repo-name" href="https://github.com/Namchee/vue-ztext">vue-ztext</a>
										a.repo-meta href="https://github.com/Namchee/vue-ztext"
											span.repo-stars 1 star
											span.repo-license MIT
											span.repo-updated 4 weeks ago
							.split-item
								a.code-preview href="https://github.com/Namchee/vue-ztext"
									pre.dark
										h3 Vue
										code
											<span class="yellow-code">import</span> <span class="blue-code">ZText</span> <span class="yellow-code">from</span> <span class="green-code">'@namchee/vue-ztext';</span>
											<br>
											<br>app.<span class="purple-code">use</span>(<span class="blue-code">ZText</span>);
											<hr>
											<span class="red-code">&lt;template&gt;</span>
											<br>	<span class="red-code">&lt;z-text&gt;</span>
											<br>		Hello World!
											<br>	<span class="red-code">&lt;/z-text&gt;</span>
											<br><span class="red-code">&lt;/template&gt;</span>
			section.styling#styling
				.wrapper
					.container
						h2 Styling
						p Start with this CSS snippet and style ztext any way you want. Ztext works with absolutely any font that works on the web. Plus, it's easy to integrate with CSS animations and transitions.
						.split
							.split-item
								pre.dark
									h3 CSS
									code#copy-2
										<span class="red-code">h1</span> {
										<br>   <span class="yellow-code">font</span>: <span class="orange-code">bold</span> <span class="orange-code">5em</span> <span class="green-code">"Georgia"</span>, <span class="orange-code">serif</span>;
										<br>   <span class="yellow-code">color</span>: <span class="aqua-code">#90a4ae</span>;<span class="dot" style="background:#90a4ae"></span>
										<br>}
										<br>
										<br>
										<span class="red-code">.z-text</span> {
										<br>   <span class="gray-code">/* Tip: Apply CSS transforms here */</span>
										<br>   <span class="gray-code">/* rotateX() == up/down */</span>
										<br>   <span class="gray-code">/* rotateY() == left/right */</span>
										<br>   <span class="yellow-code">transform</span>: <span class="blue-code">rotateX</span>(<span class="orange-code">15deg</span>) <span class="blue-code">rotateY</span>(<span class="orange-code">-30deg</span>);
										<br>}
										<br>
										<br><span class="red-code">.z-layer:not(:first-child)</span> {
										<br>   <span class="yellow-code">color</span>: <span class="aqua-code">#455a64</span>;<span class="dot" style="background:#455a64"></span>
										<br>}
										.menu.menu-2.right-align
							.split-item.preview.styling-example-primary
								h1.large data-z="true" CSS
			section.more#more
				.wrapper
					.container
						h2 But wait, there's more!
						p Ztext isn't just for text. Add a third dimension to SVG, emojis, and images.
						.split
							.split-item
								.toggle-menu
									button.toggle data-show="svg" SVG
									button.toggle data-show="img" Image
									button.toggle.is-on data-show="emoji" Emoji
								pre.dark
									h3 HTML
									.tab.svg-code-tab
										code#copy-3
											<span class="red-code">&lt;span <span class="yellow-code">data-z</span></span> <span class="yellow-code">data-z-layers</span>=<span class="green-code">"15"</span> <span class="yellow-code">data-z-depth</span>=<span class="green-code">"50px"</span><span class="red-code">&gt;</span>
											<br>   <span class="red-code">&lt;svg</span> <span class="yellow-code">xmlns</span>=<span class="green-code">"http://www.w3.org/2000/svg"</span> <span class="yellow-code">viewBox</span>=<span class="green-code">"0 0 400 400"</span> <span class="yellow-code">width</span>=<span class="green-code">"200"</span> <span class="yellow-code">height</span>=<span class="green-code">"200"</span><span class="red-code">></span>
											<br>       <span class="red-code">&lt;path</span> <span class="yellow-code">d</span>=<span class="green-code">"..."</span><span><span class="red-code"> /&gt;</span>
											<br>    <span class="red-code">&lt;/svg&gt;</span>
											<br><span class="red-code">&lt;/span&gt;</span>
											.menu.menu-3.right-align
									.tab.img-code-tab
										code#copy-4
											<span class="red-code">&lt;span <span class="yellow-code">data-z</span> <span class="yellow-code">data-z-depth</span>=<span class="green-code">"40px"</span>&gt;</span>
											<br>   <span class="red-code">&lt;img</span> <span class="yellow-code">width</span>=<span class="green-code">"150"</span> <span class="yellow-code">height</span>=<span class="green-code">"120"</span> <span class="yellow-code">src</span>=<span class="green-code">"images/grace.jpg"</span> <span class="yellow-code">alt</span>=<span class="green-code">"Photo of Grace"</span><span class="red-code">></span>
											<br><span class="red-code">&lt;span&gt;</span>
											.menu.menu-4.right-align
									.tab.emoji-code-tab.is-on
										code#copy-5
											<span class="red-code">&lt;span</span> <span class="yellow-code">data-z</span> <span class="yellow-code">data-z-layers</span>=<span class="green-code">"20"</span> <span class="yellow-code">data-z-depth</span>=<span class="green-code">"50px"</span><span class="red-code">&gt;</span>😂🔥🍔<span class="red-code">&lt;/span&gt;</span>
											.menu.menu-5.right-align
								pre.dark
									h3 CSS
									code
										<span class="red-code">.z-layer:not(:first-child)</span> {
										<br>   <span class="yellow-code">filter</span>: <span class="blue-code">brightness</span>(<span class="orange-code">0.7</span>);
										<br>}
							.split-item.preview
								button.button.pause Pause
								span.svg-code-example data-z="true" data-z-layers="15" data-z-depth="50px"
									svg width="200" height="200" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 400"
										path d="M153.62 301.59c94.34 0 145.94-78.16 145.94-145.94 0-2.22 0-4.43-.15-6.63A104.36 104.36 0 00325 122.47a102.38 102.38 0 01-29.46 8.07 51.47 51.47 0 0022.55-28.37 102.79 102.79 0 01-32.57 12.45 51.34 51.34 0 00-87.41 46.78A145.62 145.62 0 0192.4 107.81a51.33 51.33 0 0015.88 68.47A50.91 50.91 0 0185 169.86v.65a51.31 51.31 0 0041.15 50.28 51.21 51.21 0 01-23.16.88 51.35 51.35 0 0047.92 35.62 102.92 102.92 0 01-63.7 22 104.41 104.41 0 01-12.21-.74 145.21 145.21 0 0078.62 23" stroke="#1da1f2" stroke-width="10px" fill="none"
								span.img-code-example data-z="true" data-z-depth="40px"
									img src="img/grace.jpg" width="500" height="400" alt="Photo of Grace"
								span.emoji-code-example data-z="true" data-z-layers="20" data-z-depth="50px" 😂🔥🍔
			section.options#options
				.wrapper
					.container.option.depth-option#depth
						h2 Options
						.split
							.split-item.preview
								h1.medium data-z="true" 1rem
								h1.medium data-z="true" data-z-depth="60px" data-z-layers="30" 60px
							.split-item
								h3
									a href="#depth" depth
									small.param CSS length value
								p
									| The depth of the effect on the z-axis. Accepts any valid CSS length value except for %. Default: 
									code.light "1rem"
								.menu.menu-6
					.container.option.layers-option#layers
						.split
							.split-item.preview
								h1.large data-z="true" data-z-layers="10" data-z-depth=".25em" 10
								h1.large data-z="true" data-z-depth=".5em" data-z-layers="2" 2
							.split-item
								h3
									a href="#layers" layers
									small.param integer
								p
									| Number of layers that make up the effect. Default: 
									code.light 10
								.menu.menu-7
					.container.option.perspective-option#perspective
						.split
							.split-item.preview.vertical
								h1.small data-z="true" data-z-perspective="none" none
								h1.small data-z="true" data-z-perspective="100px" 80px
								h1.small data-z="true" data-z-perspective="500px" 500px
							.split-item
								h3
									a href="#perspective" perspective
									small.param CSS length value, "none", or "inherit"
								p
									| Set distance from the viewer. Default: 
									code.light 500px
								.menu.menu-8
					.container.option.fade-option#fade
						.split
							.split-item.preview
								h1.large data-z="true" data-z-layers="10" data-z-depth=".25em" data-z-fade="true" true
							.split-item
								h3
									a href="#fade" fade
									small.param boolean
								p
									| Make the text fade away. Default: 
									code.light false
								.menu.menu-9
					.container.option.direction-option#direction
						.split
							.split-item.preview.vertical
								h1.small data-z="true" data-z-depth=".5em" both
								h1.small data-z="true" data-z-depth=".5em" data-z-direction="backwards" backwards
								h1.small data-z="true" data-z-depth=".5em" data-z-direction="forwards" forwards
							.split-item
								h3
									a href="#direction" direction
									small.param "both" | "backwards" | "forwards"
								p
									| The direction the effect is to be applied. Default: 
									code.light "both"
								.menu.menu-10
					.container.option.event-option#event
						.split
							.split-item.preview.vertical.static
								h1.medium data-z="true" data-z-event="none" none
								h1.medium data-z="true" data-z-event="pointer" pointer
								h1.medium data-z="true" data-z-event="scroll" scroll
								/ h1.medium data-z="true" data-z-event="scrollX" scrollX
								/ h1.medium data-z="true" data-z-event="scrollY" scrollY
							.split-item
								h3
									a href="#event" event
									small.param "none" | "pointer" | "scroll" | "scrollX" | "scrollY"
								p
									| Control text rotation with JavaScript. Default: 
									code.light "none"
								p This does not override rotations applied with CSS to <code class="light">.z-text</code>. It will add to those rotations. This allows you to set a start rotation with CSS.
								p 
									code.light "pointer"
									|  rotates text in response to the <code>mousemove</code> and <code>touchmove</code> events.
								p 
									code.light "scroll"
									|  rotates text toward the center of the viewport.
								p 
									code.light "scrollX"
									|  rotates text toward the horizontal center of the viewport.
								p 
									code.light "scrollY"
									|  rotates text toward the vertical center of the viewport.
								.menu.menu-11
					.container.option.event-rotation-option#eventRotation
						.split
							.split-item.preview.static
								h1.small data-z="true" data-z-event="pointer" data-z-eventRotation="20deg" 10deg
								h1.small data-z="true" data-z-event="pointer" data-z-eventRotation="60deg" 60deg
							.split-item
								h3
									a href="#eventRotation" eventRotation
									small.param CSS rotation value
								p
									| With the <code class="light">event</code> option enabled, set the maximum rotation to be applied. Default: 
									code.light "30deg"
								.menu.menu-12
					.container.option.event-direction-option#eventDirection
						.split
							.split-item.preview.static.vertical
								h1.medium data-z="true" data-z-event="pointer" default
								h1.medium data-z="true" data-z-event="pointer" data-z-eventDirection="reverse" reverse
							.split-item
								h3
									a href="#eventRotationDirection" eventDirection
									small.param "default" | "reverse"
								p
									| With the <code class="light">event</code> option enabled, choose whether the rotation faces toward the target point (default) or away from it (reverse). Default: 
									code.light "default"
								.menu.menu-13
		footer.footer
			.wrapper
				.container &copy; 2021 Bennett Feely (<a href="https://twitter.com/bennettfeely">@bennettfeely</a>)
		#fb-root
		script async="true" defer="true" crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&version=v8.0&appId=261257780581807" nonce="PHc3kpRj"
		script src="js/ztext.min.js"
		script src="js/clipboard.min.js"
		script src="js/github.min.js"
		script src="js/demo.min.js"
		script src="js/examples.min.js"